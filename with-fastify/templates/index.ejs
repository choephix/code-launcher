<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DevLaunch: Project Starter</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',
          'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        padding: 20px;
        background-color: #1e1e1e;
        color: #d4d4d4;
        margin: 0;
      }
      h1 {
        color: #569cd6;
        text-align: center;
        font-size: 2em;
        margin-bottom: 30px;
      }
      .button-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
        margin-bottom: 30px;
      }
      .template-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 15px;
        background-color: #252526;
        border: 1px solid #3e3e42;
        border-radius: 5px;
        transition: all 0.2s ease;
        cursor: pointer;
        
      }
      .template-button:hover {
        background-color: #2d2d2d;
        border-color: #007acc;
      }
      .template-button img {
        width: 48px;
        height: 48px;
        margin-bottom: 10px;
        filter: invert(1);
      }
      .template-button span {
        text-align: center;
        font-weight: 400;
        color: #d4d4d4;
      }
      #result {
        background-color: #252526;
        border: 1px solid #3e3e42;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
      }
      .columns {
        display: flex;
        gap: 15px;
      }
      .column {
        flex: 1;
      }
      pre {
        background-color: #1e1e1e;
        padding: 10px;
        border-radius: 3px;
        overflow-x: auto;
        color: #d4d4d4;
        font-family: 'Consolas', 'Courier New', monospace;
      }
      h2 {
        color: #569cd6;
        border-bottom: 1px solid #3e3e42;
        padding-bottom: 5px;
        font-size: 1.2em;
      }
      .action-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
      }
      .action-button {
        padding: 8px 16px;
        background-color: #0e639c;
        color: #ffffff;
        border: none;
        border-radius: 2px;
        font-size: 13px;
        font-weight: 400;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      .action-button:hover {
        background-color: #1177bb;
      }
    </style>
  </head>
  <body>
    <h1>DevLaunch: Project Starter</h1>
    <div id="templateButtons" class="button-grid">
      <!-- Template buttons will be inserted here -->
    </div>

    <div id="result">
      <!-- Results will be inserted here -->
    </div>

    <div class="action-buttons">
      <button class="action-button" onclick="runCommand('ls -la ~')">Run ls -la ~</button>
      <button class="action-button" onclick="runCustomCommand()">Run Custom Command</button>
    </div>

    <script>
      const templates = [
        {
          name: 'Empty Project',
          icon: 'https://simpleicons.org/icons/git.svg',
          command:
            'mkdir -p ~/workspace/{folderName} && cd ~/workspace/{folderName} && git init && code .',
        },
        {
          name: 'Next.js App',
          icon: 'https://simpleicons.org/icons/nextdotjs.svg',
          command: 'npx create-next-app ~/workspace/{folderName} && code ~/workspace/{folderName}',
        },
        {
          name: 'Vite React + TypeScript',
          icon: 'https://simpleicons.org/icons/react.svg',
          command:
            'npm create vite@latest ~/workspace/{folderName} -- --template react-ts && cd ~/workspace/{folderName} && npm install && code .',
        },
        {
          name: 'Vite Vanilla TypeScript',
          icon: 'https://simpleicons.org/icons/vite.svg',
          command:
            'npm create vite@latest ~/workspace/{folderName} -- --template vanilla-ts && cd ~/workspace/{folderName} && npm install && code .',
        },
        {
          name: 'Turbo Monorepo',
          icon: 'https://simpleicons.org/icons/turborepo.svg',
          command:
            'npx create-turbo@latest ~/workspace/{folderName} && cd ~/workspace/{folderName} && code .',
        },
        {
          name: 'Pixi.js Project',
          icon: 'https://simpleicons.org/icons/piapro.svg',
          command:
            'mkdir -p ~/workspace/{folderName} && cd ~/workspace/{folderName} && npm init -y && npm install pixi.js && echo "import * as PIXI from \'pixi.js\';\n\nconst app = new PIXI.Application();\ndocument.body.appendChild(app.view);" > index.js && code .',
        },
        {
          name: 'Three.js Project',
          icon: 'https://simpleicons.org/icons/threedotjs.svg',
          command:
            'mkdir -p ~/workspace/{folderName} && cd ~/workspace/{folderName} && npm init -y && npm install three && echo "import * as THREE from \'three\';\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);" > index.js && code .',
        },
        {
          name: 'Astro Project',
          icon: 'https://simpleicons.org/icons/astro.svg',
          command:
            'npm create astro@latest ~/workspace/{folderName} && cd ~/workspace/{folderName} && code .',
        },
      ];

      function createProjectFolder(template) {
        const folderName = prompt(`Enter the project folder name for ${template.name}:`);
        if (folderName) {
          const command = template.command.replace(/\{folderName\}/g, folderName);
          runCommand(command);
        }
      }

      function runCommand(command) {
        fetch('/run-command', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ command }),
        })
          .then(response => response.json())
          .then(data => updateResult(data));
      }

      function runCustomCommand() {
        const command = prompt('Enter the command to run:');
        if (command) {
          runCommand(command);
        }
      }

      function updateResult(data) {
        const resultDiv = document.getElementById('result');
        resultDiv.innerHTML = `
          <div class="columns">
            <div class="column">
              <h2>Command Output</h2>
              <pre>${data.commandOutput}</pre>
            </div>
            <div class="column">
              <h2>System Stats</h2>
              <p>CPU Usage: ${data.cpuUsage}%</p>
              <p>Memory Usage: ${data.memUsage}%</p>
            </div>
          </div>
        `;
      }

      function createTemplateButtons() {
        const buttonContainer = document.getElementById('templateButtons');
        templates.forEach(template => {
          const button = document.createElement('button');
          button.className = 'template-button';
          button.innerHTML = `
            <img src="${template.icon}" alt="${template.name} icon">
            <span>${template.name}</span>
          `;
          button.onclick = () => createProjectFolder(template);
          buttonContainer.appendChild(button);
        });
      }

      createTemplateButtons();
    </script>
  </body>
</html>
